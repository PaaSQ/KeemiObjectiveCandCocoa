<?xml version="1.0" encoding="UTF-8"?>
<catalog>
  <info format="1.0">
    <title>Objective-C 2.0 and Cocoa</title>
    <author>
      <name>Ren√© Kollmorgen</name>
      <email>rene.kollmorgen@keemimobile.com</email>
    </author>
    <publisher>
      <name>www.keemimobile.com</name>
      <website>www.keemimobile.com</website>
    </publisher>
    <cover>
      <media ref="Cover.jpg" type="image"/>
    </cover>
    <download>https://github.com/PaaSQ/KeemiObjectiveCandCocoa</download>
    <description>Objective-C is a superset of C, it is easy to mix C and even C++ into Cocoa applications. Cocoa is Apple's native object-oriented application programming interface (API) for the OS X operating system. This KEEMI catalog is aimed at developers who have already build an application using Objective-C and Cocoa (or Cocoa Touch) and want to accelerate their daily work with the essentials in mind.</description>
    <language>english</language>
    <version>0.1</version>
  </info>
  <questionList>
    <question type="singleChoice" name="dontCompareToYes">
      <text>Look at the code snippet below. Which description matches the result of this code?</text>
      <answer explanation="dontCompareToYes">
        <mediaList>
          <media ref="boolDontCompareToYes.html" type="html"/>
        </mediaList>
        <answerItem correct="yes">
          <text>BOOL is a typedef for a signed char and YES is a defined constant with value 1, the comparison checks 1 == 5 and therefore evaluates to false, "entry is not checked" is the output</text>
        </answerItem>
        <answerItem correct="no">
          <text>the output is "entry is checked" as 5 is a positive value and non-zero values evaluate to true</text>
        </answerItem>
        <answerItem correct="no">
          <text>each assignment to a variable of type BOOL is a checked assignment like: BOOL checkedEntry = 5?YES:NO; the output is "entry is checked"</text>
        </answerItem>
        <answerItem correct="no">
          <text>BOOL is internally handled as the C99 type _Bool, therefore the compiler converts 5 to true(1)</text>
        </answerItem>
      </answer>
      <resourceList>
        <resource name="dontCompareToYes"/>
      </resourceList>
    </question>
    <question type="flashcard" name="rulesOfThumbBool">
      <text>What are the rules of thumb dealing with type BOOL?</text>
      <answer explanation="dontCompareToYes">
        <answerItem correct="yes">
          <text>be carefully to compare to YES or NO directly if you can not guarantee, that the value to compare with is actually YES or NO assigned to</text>
        </answerItem>
        <answerItem correct="yes">
          <text>assign YES or NO to variables of type BOOL and no other values(or return values of expressions)</text>
        </answerItem>
      </answer>
      <resourceList>
        <resource name="dontCompareToYes"/>
      </resourceList>
    </question>
    <question type="multipleChoice" name="dynamicBinding">
      <text>Look at the options below. Which options matches the meaning of Dynamic Binding?</text>
      <answer explanation="dynamicBinding" numberOfVisibleCorrectItems="2">
        <answerItem correct="yes">
          <text>determining the method to invoke at runtime instead of at compile time</text>
        </answerItem>
        <answerItem correct="yes">
          <text>is also referred to as late binding</text>
        </answerItem>
        <answerItem correct="yes">
          <text>in Objective-C, all methods are resolved dynamically at runtime</text>
        </answerItem>
        <answerItem correct="yes">
          <text>the exact code executed is determined by both the method name (the selector) and the receiving object</text>
        </answerItem>
        <answerItem correct="no">
          <text>is a key concept in providing a consistent programming interface to the classes in a program</text>
        </answerItem>
        <answerItem correct="no">
          <text>to enable Dynamic Binding a base class must provide a common function which is inherit by sub-classes</text>
        </answerItem>
        <answerItem correct="no">
          <text>functions declared in a base class or protocol can be bind at runtime only</text>
        </answerItem>
      </answer>
    </question>
    <question type="aggravatedSingleChoice" name="nilIsAnObject">
      <text>What is the output of the program?</text>
      <answer>
        <mediaList>
          <media ref="theObjectNil.html" type="html"/>
        </mediaList>
        <answerItem correct="yes" explanation="nilIsAnObject">
          <text>intVar = 0, objectVar = (null)</text>
        </answerItem>
        <answerItem correct="no">
          <text>intVar = 15, objectVar = (null)</text>
        </answerItem>
        <answerItem correct="no">
          <text>intVar = 15, objectVar = Hello</text>
        </answerItem>
        <answerItem correct="no">
          <text>intVar = 0, objectVar = Hello</text>
        </answerItem>
        <answerItem correct="no">
          <text>the code does not compile</text>
        </answerItem>
        <answerItem correct="no">
          <text>the code crashes at runtime</text>
        </answerItem>
      </answer>
      <resourceList>
        <resource name="workingWithNil"/>
      </resourceList>
    </question>
    <question type="aggravatedMultipleChoice" name="forwardClassDeclaration">
      <title>Multiple options are correct</title>
      <text>The code snippet makes use of forward class declaration using @class. Choose the options which matches the usage and benefit of a forward class declaration.</text>
      <answer numberOfVisibleCorrectItems="2">
        <mediaList>
          <media ref="forwardClassDeclaration.html" type="html"/>
        </mediaList>
        <answerItem correct="yes">
          <text>Both classes, Person and Machine, refer to each other. The code would not compile correctly, if each class imports the other in the header file. Forward class declaration must be used.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Forward class declaration reduces interdependency of classes and keeps compile time as low as possible.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Limits the scope of what a consumer of your class needs to import and therefore supports maintenance.</text>
        </answerItem>
        <answerItem correct="no">
          <text>Forward class declaration should be used when a class derives from a base class.</text>
        </answerItem>
        <answerItem correct="no">
          <text>A forward class declaration is sufficient if the class uses functions from NSObject only.</text>
        </answerItem>
        <answerItem correct="no">
          <text>The member variable, which stores a pointer to an forward declared object, cannot be inherited from derived classes.</text>
        </answerItem>
      </answer>
    </question>
    <question type="aggravatedSingleChoice" name="literalSyntax">
      <title>Only one option is correct</title>
      <text>The code shown makes use of the literal syntax of Objective-C. Which option applies to the code?</text>
      <answer>
        <mediaList>
          <media ref="literalInsertNilIntoArray.html" type="html"/>
        </mediaList>
        <answerItem correct="no">
          <text>objects of type NSNumber can not be created using the literal syntax</text>
        </answerItem>
        <answerItem correct="no">
          <text>this code prints: numbers: 41, 42</text>
        </answerItem>
        <answerItem correct="no">
          <text>this code prints: numbers: 41, 42, null, 43, 44</text>
        </answerItem>
        <answerItem correct="no">
          <text>line 14, an exception is thrown at runtime as a nil is missing at the end of the parameter list</text>
        </answerItem>
        <answerItem correct="yes" explanation="literalSyntax">
          <text>an exception of type NSInvalidArgumentException is thrown at runtime</text>
        </answerItem>
      </answer>
    </question>
    <question type="flashcard" name="enumerationsSwitchStatement">
      <text>The code shown produces a compiler warning. Why?</text>
      <answer>
        <mediaList>
          <media ref="enumarationsSwitchStatement.html" type="html"/>
        </mediaList>
        <answerItem correct="yes" explanation="enumarations">
          <text>The compiler warning is: Enumeration values 'MY_OPTION_2', 'MY_OPTION_3', and 'MY_OPTION_4' not handled in switch</text>
        </answerItem>
      </answer>
    </question>
    <question type="flashcard" name="propertiesNamingConventions">
      <text>What are the naming conventions for synthesized property methods?</text>
      <answer>
        <answerItem correct="yes" explanation="properties">
          <text>The method used to access the value (the getter method) has the same name as the property. The getter method for a property called firstName will also be called firstName.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>The method used to set the value (the setter method) starts with the word "set" and then uses the capitalized property name. The setter method for a property called firstName will be called setFirstName:.</text>
        </answerItem>
      </answer>
    </question>
    <question type="singleChoice" name="propertiesSynthesizeDirective">
      <text>Which option matches the usage of the @synthesize directive?</text>
      <answer>
        <answerItem correct="yes" explanation="properties">
          <text>the @synthesize directive is used to give the generated instance variable a specified name e.g. @synthesize firstName = foreName</text>
        </answerItem>
        <answerItem correct="no">
          <text>the @synthesize directive must be used for every property declared</text>
        </answerItem>
        <answerItem correct="no">
          <text>the @synthesize directive must be used for every property which uses memory-management relevant attributes like strong, weak, copy and assign</text>
        </answerItem>
        <answerItem correct="no">
          <text>the @synthesize directive must not be used for readonly properties</text>
        </answerItem>
      </answer>
    </question>
    <question name="propertiesMemoryAttrDefault" type="wordResponse">
      <text>Which is the default memory-management related attribute for properties?</text>
      <answer>
        <answerItem correct="yes" explanation="propertiesMemoryAttributes">
          <text>strong</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Strong</text>
        </answerItem>
      </answer>
    </question>
    <question name="propertiesMemoryAttr" type="aggravatedSingleChoice">
      <text>What does the program print?</text>
      <answer>
        <mediaList>
          <media ref="personPropertyMemoryAttributes.html" type="html"/>
        </mediaList>
        <answerItem correct="yes" explanation="propertiesMemoryAttributes">
          <text>firstName=Paul, printing the nickName crashes with an EXC_BAD_ACCESS exception</text>
        </answerItem>
        <answerItem correct="no">
          <text>firstName=Paul, lastName=Johnson, nickName=paul</text>
        </answerItem>
        <answerItem correct="no">
          <text>firstName=Paul, lastName=Johnson</text>
        </answerItem>
        <answerItem correct="no">
          <text>firstName=Paul</text>
        </answerItem>
        <answerItem correct="no">
          <text>prints nothing and trying to print the nickName crashes with an EXC_BAD_ACCESS exception</text>
        </answerItem>
      </answer>
    </question>
    <question name="propertiesAttrAdhereSemantics" type="aggravatedSingleChoice">
      <text>What does the program print?</text>
      <answer>
        <mediaList>
          <media ref="personPropertyMemoryAttributesAdhereSemantics.html" type="html"/>
        </mediaList>
        <answerItem correct="yes" explanation="propertiesAttrAdhereSemantics">
          <text>firstName=Paul, lastName=1234567</text>
        </answerItem>
        <answerItem correct="no">
          <text>firstName=Paul, lastName=Johnson</text>
        </answerItem>
        <answerItem correct="no">
          <text>firstName=1234, lastName=1234567</text>
        </answerItem>
        <answerItem correct="no">
          <text>firstName=1234, lastName=Johnson</text>
        </answerItem>
      </answer>
    </question>
    <question name="equalObjects" type="multipleChoice">
      <title>Object Equality</title>
      <text>Which options best matches the handling of object equality?</text>
      <answer numberOfVisibleCorrectItems="2" explanation="equalObjects">
        <answerItem correct="yes">
          <text>Provide isEqual: and hash methods for objects that you will want to check for equality.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Objects that are equal must have the same hash, but objects that have the same hash do not necessarily have to be equal.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Testing every property to determine equality is not necessary, check what is useful.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Write hash methods that will be quick but provide a reasonably low level of collisions.</text>
        </answerItem>
        <answerItem correct="no">
          <text>Objects that have the same hash must be equal.</text>
        </answerItem>
        <answerItem correct="no">
          <text>Objects that are equal must have the same identity, obj1 == obj2 must be true.</text>
        </answerItem>
        <answerItem correct="no">
          <text>The isEqual: method from NSObject is sufficient.</text>
        </answerItem>
      </answer>
      <resourceList>
        <resource name="objectEquality"/>
      </resourceList>
    </question>
    <question name="implementingInit" type="order">
      <title>Implementing an Initializer</title>
      <text>There are several critical rules to follow when implementing an init... method that serves as a class‚Äôs sole initializer. Order the required steps!</text>
      <answer explanation="designatedInitializer">
        <answerItem correct="yes">
          <text>Invoke the superclass (super) initializer.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Check the object returned by the superclass. If it is nil, then initialization cannot proceed; return nil to the receiver.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>When initializing instance variables that are references to objects, retain or copy the object as necessary (in memory-managed code).</text>
        </answerItem>
        <answerItem correct="yes">
          <text>After setting instance variables to valid initial values, return self unless:A problem prevented initialization from succeeding, in which case return nil - or - It was necessary to return a substituted object, in which case release the freshly allocated object first (in memory-managed code).</text>
        </answerItem>
      </answer>
    </question>
    <question name="designatedInitializer" type="flashcard">
      <title>Designated Initializer</title>
      <text>What are the rules of thumb regarding a designated initializer?</text>
      <answer explanation="designatedInitializer">
        <answerItem correct="yes">
          <text>Document which one it is. All other initializer should call through to this one!</text>
        </answerItem>
        <answerItem correct="yes">
          <text>If the designated initializer is different from the superclass, ensure that its designated initializer is overridden.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Throw an exception in initializers overridden from superclasses that should not be used in the subclass.</text>
        </answerItem>
      </answer>
    </question>
    <question name="errorModel" type="aggravatedSingleChoice">
      <title>ARC and Exceptions</title>
      <text>What does the program print?</text>
      <answer>
        <mediaList>
          <media ref="arcAndExceptions.html" type="html"/>
        </mediaList>
        <answerItem correct="no">
          <text>the program prints: Person:0x1027176b0 - Sarah Johnson, Person:0x102717050 - Paul Johnson, Person:0x102711240 - Paul Johnson, finally</text>
        </answerItem>
        <answerItem correct="yes" explanation="exceptionsAndErrors">
          <text>the program prints: the reason..., finally</text>
        </answerItem>
        <answerItem correct="no">
          <text>the program prints: finally</text>
        </answerItem>
        <answerItem correct="no">
          <text>the program prints: the reason...</text>
        </answerItem>
      </answer>
    </question>
    <question name="nscopyProtocol" type="flashcard">
      <title>Copying protocols</title>
      <text>What are the rules of thumb implementing the NSCopying or NSMutableCopying protocols?</text>
      <answer>
        <answerItem correct="yes">
          <text>Implement NSCopying if yout object will need no be copied.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>If your object has mutable and immutable variants, implement both the NSCopying and NSMutableCopying protocols.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Decide whether a copy will be shallow or deep, and prefer shallow, where possible, for a normal copy.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Consider adding a deep-copy method if deep copies of yout object will be useful.</text>
        </answerItem>
      </answer>
    </question>
    <question name="delegates" type="flashcard">
      <title>Delegates</title>
      <text>Which are the general steps implementing a delegate for a custom class?</text>
      <answer explanation="delegates">
        <answerItem correct="yes">
          <text>Declare the delegate accessor methods in your class header file e.g. -(void)setDelegate: and -(id)delegate </text>
        </answerItem>
        <answerItem correct="yes">
          <text>Implement the accessor methods. If you use ARC, the instance variable which holds the reference to the delegate should be __weak to avoid retain circles.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Declare a formal or informal protocol containing the programmatic interface for the delegate. Informal protocols are categories on the NSObject class. If you declare a formal protocol for your delegate, make sure you mark groups of optional methods with the @optional directive. </text>
        </answerItem>
        <answerItem correct="yes">
          <text>You should always pass the instance that is delegating through your interface methods e.g. -(void)dataLoader:(DataLoader*)loader didLoadData:(NSData*)data</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Before invoking a delegation method, make sure the delegate implements it by sending it a respondsToSelector: message.</text>
        </answerItem>
      </answer>
    </question>
    <question name="categories" type="multipleChoice">
      <title>Categories</title>
      <text>Which options describe a category?</text>
      <answer numberOfVisibleCorrectItems="2" explanation="categories">
        <answerItem correct="yes">
          <text>A category can be declared for any class, even if you don‚Äôt have the original implementation source code.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Any methods that you declare in a category will be available to all instances of the original class.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Any methods that you declare in a category will be available to all subclasses of the original class.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>At runtime, there‚Äôs no difference between a method added by a category and one that is implemented by the original class.</text>
        </answerItem>
        <answerItem correct="no">
          <text>A category must be declared and implemented in separate files (own .h / .m).</text>
        </answerItem>
        <answerItem correct="no">
          <text>A category should implement private methods only.</text>
        </answerItem>
        <answerItem correct="no">
          <text>Categories can be used to declare instance methods and are usually used for declaring additional properties.</text>
        </answerItem>
      </answer>
    </question>
    <question name="classExtension" type="multipleChoice">
      <title>Class Extensions</title>
      <text>Which options describe a class extension?</text>
      <answer numberOfVisibleCorrectItems="3" explanation="classExtension">
        <answerItem correct="yes">
          <text>A class extension can only be added to a class for which you have the source code at compile time (the class is compiled at the same time as the class extension).</text>
        </answerItem>
        <answerItem correct="yes">
          <text>The methods declared by a class extension are implemented in the @implementation block for the original class.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Unlike regular categories, a class extension can add its own properties and instance variables to a class.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Class extensions are often used to extend the public interface with additional private methods or properties for use within the implementation of the class itself.</text>
        </answerItem>
        <answerItem correct="yes">
          <text>Because no name is given in the parentheses, class extensions are often referred to as anonymous categories.</text>
        </answerItem>
        <answerItem correct="no">
          <text>Unlike regular categories, a class extension can not add its own properties ans instance variables to a class.</text>
        </answerItem>
      </answer>
    </question>
  </questionList>
  <explanationList>
    <explanation name="dontCompareToYes">
      <title>Type BOOL</title>
      <section>
        <text>Type BOOL is a typedef for a signed char and can hold any value from -128 through 127.</text>
        <text>YES is Objective-C‚Äôs truth value, a defined constant with value 1.</text>
        <text>As this fact can cause subtle problems, the rules of thumbs dealing with type BOOL are:</text>
        <question name="rulesOfThumbBool"/>
      </section>
      <resourceList>
        <resource name="dontCompareToYes"/>
      </resourceList>
    </explanation>
    <explanation name="dynamicBinding">
      <title>Dynamic binding</title>
      <section>
        <text>Dynamic binding can be described as:</text>
        <question name="dynamicBinding"/>
        <text>The following example illustrates how dynamic binding can be used in Objective-C:</text>
        <mediaList>
          <media ref="dynamicBindingExample.html" type="html"/>
        </mediaList>
      </section>
    </explanation>
    <explanation name="nilIsAnObject">
      <title>nil is an object</title>
      <section>
        <text>A nil value is the safest way to initialize an object pointer if you don‚Äôt have another value to use, because it‚Äôs perfectly acceptable in Objective-C to send a message to nil. If you do send a message to nil, obviously nothing happens.</text>
        <text>If you expect a return value from a message sent to nil, the return value will be nil for object return types, 0 for numeric types, and NO for BOOL types. Returned structures have all members initialized to zero.</text>
      </section>
      <resourceList>
        <resource name="workingWithNil"/>
      </resourceList>
    </explanation>
    <explanation name="literalSyntax">
      <title>Objective-C Literals</title>
      <section>
        <text>An ‚ÄúObjective-C Literal‚Äù is a chunk of code that references a specific Cocoa object, creating it if necessary. Using the literal syntax reduces source code size and makes it much easier to read. The code below shows how to create objects of type NSString, NSNumber, NSArray and NSDictionary using the literal syntax.</text>
        <mediaList>
          <media ref="literalSyntax.html" type="html"/>
        </mediaList>
        <text>Attempting to insert nil into an array or dictionary with literal syntax will cause an exception to be thrown.</text>
        <mediaList>
          <media ref="literalInsertNilIntoArray.html" type="html"/>
        </mediaList>
      </section>
    </explanation>
    <explanation name="enumarations">
      <title>Using Enumerations</title>
      <section>
        <text>Enumerations give values are readable name. They can be used to define states, error status or options passed to methods. Enumerations can be defined with an explicit type. Doing so means that the type is guaranteed to be the chosen rather than a type chosen by the compiler. The code below illustrates the usage of enumerations.</text>
        <mediaList>
          <media ref="enumarations.html" type="html"/>
        </mediaList>
      </section>
      <resourceList>
        <resource name="enumerations"/>
      </resourceList>
    </explanation>
    <explanation name="properties">
      <title>Properties</title>
      <section>
        <text>Objective-C properties offer a way to define the information that a class is intended to encapsulate. You access or set an object‚Äôs properties via accessor methods. By default, these accessor methods are synthesized automatically for you by the compiler, so you don‚Äôt need to do anything other than declare the property using @property in the class interface. The synthesized methods follow specific naming conventions:</text>
        <question name="propertiesNamingConventions"/>
        <text>As well as making explicit accessor method calls, Objective-C offers an alternative dot syntax to access an object‚Äôs properties.</text>
        <mediaList>
          <media ref="personPropertiesHeader.html" type="html"/>
          <media ref="personPropertiesImp.html" type="html"/>
          <media ref="personPropertiesMain.html" type="html"/>
        </mediaList>
        <text>How the compiler should synthesize the relevant accessor methods are further specified by property attributes. In the case of attribute: readonly, the compiler will synthesize a fullName getter method, but not a setFullName: method.</text>
        <text>By default, a readwrite property will be backed by an instance variable, which will again be synthesized automatically by the compiler. Unless you specify otherwise, the synthesized instance variable has the same name as the property, but with an underscore prefix. For a property called firstName, for example, the synthesized instance variable will be called _firstName.</text>
      </section>
    </explanation>
    <explanation name="propertiesMemoryAttributes">
      <title>Properties / Memory-Management Semantics</title>
      <section>
        <text>Properties encapsulate data, and that data needs to have concrete ownership semantics. This affects only the setter. When the compiler synthesizes the accessors, it uses property attributes to determine what code to generate. If you create your own accessors, you must stick to what you specify for this attribute. Memory-Management related attribues are:</text>
      </section>
      <section>
        <title>assign</title>
        <text>The generated setter is a simple assign operation used for scalar types such NSInteger</text>
      </section>
      <section>
        <title>strong</title>
        <text>The new value set is retained, the old value is released (if there are no references to the object anymore). Object properties are strong by default.</text>
      </section>
      <section>
        <title>weak</title>
        <text>Defines a nonowning relationship. The new value set is not retained nor is the old value released. When the value is destroyed the property values is nilled out.</text>
      </section>
      <section>
        <title>unsafe_unretained</title>
        <text>Has the same semantics as assign but is used for objects. The value is not nilled out if the target is destroyed.</text>
      </section>
      <section>
        <title>copy</title>
        <text>Instead of retaining the value is copied.</text>
      </section>
    </explanation>
    <explanation name="propertiesAttrAdhereSemantics">
      <title>Properties / Adhere property semantics</title>
      <section>
        <text>Ensure that anywhere a property's backing variable is set, the declared semantics are adhered to. If you declare a property as copy for example ensure that this documented contract is implemented in all methods which set the property's variable like initializers or setters.</text>
        <text>By default the compiler generates the right semantic for setters for you. Look at the program below.</text>
        <mediaList>
          <media ref="personPropertyMemoryAttributesAdhereSemantics.html" type="html"/>
        </mediaList>
        <text>The program prints:firstName=Paul, lastName=1234567</text>
        <text>as the setter for property lastName does not implement the copy as documented with the declaration.</text>
      </section>
    </explanation>
    <explanation name="equalObjects">
      <title>Object Equality</title>
      <section>
        <text>The hash and isEqual: methods, both declared by the NSObject protocol, are closely related. The hash method must be implemented to return an integer that can be used as a table address in a hash table structure. If two objects are equal (as determined by the isEqual: method), they must have the same hash value. If your object could be included in collections such as NSSet objects, you need to define hash and verify the invariant that if two objects are equal, they return the same hash value. The default NSObject implementation of isEqual: simply checks for pointer equality.</text>
        <text>The general rules using isEqual: and hash are:</text>
        <question name="equalObjects"/>
      </section>
      <section>
        <text>The program below shows the implementation of isEqual: and hash exemplary.</text>
        <mediaList>
          <media ref="personEquality.html" type="html"/>
        </mediaList>
        <text>The program prints: 1. equal, 2. equal and 4. equal</text>
      </section>
      <resourceList>
        <resource name="objectEquality"/>
      </resourceList>
    </explanation>
    <explanation name="designatedInitializer">
      <title>Object Initialization</title>
      <section>
        <text>Often initialization depends on external data to set an object to a reasonable initial state. Thus initializers can take one or more parameters; the only requirement is that the initializing method begins with the letters ‚Äúinit‚Äù.</text>
        <text>A typical implementation of a initializer involves the follwing steps:</text>
        <question name="implementingInit"/>
      </section>
      <section>
        <title>Designated Initializer</title>
        <text>If there are multiple initializers for a class, such a class should have a designated initializer. The rules of thumb using a designated initializer are:</text>
        <question name="designatedInitializer"/>
      </section>
    </explanation>
    <explanation name="exceptionsAndErrors">
      <title>Dealing with Errors</title>
      <section>
        <text>Automatic Reference Counting(ARC) is not exception safe by default, any objects that should be released at the end of a scope in which an exception is thrown will not be released using ARC. The program below prints: the reason..., finally</text>
        <mediaList>
          <media ref="arcAndExceptions.html" type="html"/>
        </mediaList>
        <text>The dealloc methods are not called!</text>
        <text>The rules of thumb handling erros in Objective-C are:</text>
        <text>Use exceptions only for fatal errors that should bring down the entire application.</text>
        <text>For nonfatal errors, either provide a delegate method to handle errors or offer an out-parameter NSError object.</text>
      </section>
    </explanation>
    <explanation name="delegates">
      <title>Delegates</title>
      <section>
        <text>A delegate is an object that acts on behalf of, or in coordination with, another object when that object encounters an event in a program. To implement a delegate for your custom class, complete the following steps:</text>
        <question name="delegates"/>
      </section>
    </explanation>
    <explanation name="categories">
      <title>Categories Add Methods to Existing Classes</title>
      <section>
        <text>If you need to add a method to an existing class, perhaps to add functionality to make it easier to do something in your own application, the easiest way is to use a category.</text>
        <text>A Category can be described as:</text>
        <question name="categories"/>
        <text>The code below shows a category Friendship for the class Person.</text>
        <mediaList>
          <media ref="personCategoryFriendship.html" type="html"/>
        </mediaList>
        <text>Categories can be used to declare either instance methods or class methods but are not usually suitable for declaring additional properties. It‚Äôs valid syntax to include a property declaration in a category interface, but it‚Äôs not possible to declare an additional instance variable in a category. This means the compiler won‚Äôt synthesize any instance variable, nor will it synthesize any property accessor methods. You can write your own accessor methods in the category implementation, but you won‚Äôt be able to keep track of a value for that property unless it‚Äôs already stored by the original class.</text>
      </section>
    </explanation>
    <explanation name="classExtension">
      <title>Class Extensions Extend the Internal Implementation</title>
      <section>
        <text>A class extension bears some similarity to a category, but</text>
        <question name="classExtension"/>
      </section>
    </explanation>
  </explanationList>
  <resourceList>
    <resource name="effectiveObjc" type="book">
      <title>Effectice Objective-C 2.0</title>
      <link>http://www.effectiveobjectivec.com/</link>
      <text>52 Specific Ways to Improve Your iOS and OS X Programs</text>
    </resource>
    <resource name="dontCompareToYes" type="website">
      <title>Don't compare to YES</title>
      <link>http://blog.bignerdranch.com/564-bools-sharp-corners/</link>
    </resource>
    <resource name="workingWithNil" type="website">
      <title>Working with nil</title>
      <link>https://developer.apple.com/library/ios/documentation/cocoa/conceptual/ProgrammingWithObjectiveC/WorkingwithObjects/WorkingwithObjects.html#//apple_ref/doc/uid/TP40011210-CH4-SW22</link>
    </resource>
    <resource name="enumerations" type="website">
      <title>NS_ENUM &amp; NS_OPTIONS</title>
      <link>http://nshipster.com/ns_enum-ns_options/</link>
    </resource>
    <resource name="objectEquality" type="website">
      <title>A good hash function ...</title>
      <link>http://de.scribd.com/doc/36454091/Effective-Java-Chapter3</link>
    </resource>
  </resourceList>
  <mediaList>
    <media ref="boolDontCompareToYes.html" type="html"/>
    <media ref="dynamicBindingExample.html" type="html" label="Dynamic Binding Example" showLabelBeforeEvaluated="yes"/>
    <media ref="theObjectNil.html" type="html"/>
    <media ref="forwardClassDeclaration.html" type="html"/>
    <media ref="literalInsertNilIntoArray.html" type="html" label="NSInvalidArgumentException is thrown"/>
  </mediaList>
</catalog>
